<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dbsy.student.mapper.EmploymentMapper">
    <resultMap id="BaseResultMap" type="com.dbsy.student.pojo.Employment">
        <constructor>
            <arg column="id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="student_id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="is_sign" javaType="java.lang.Boolean" jdbcType="BIT"/>
            <arg column="company" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="phone_number" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="remarks" javaType="java.lang.String" jdbcType="VARCHAR"/>
        </constructor>
    </resultMap>
    <insert id="insert" parameterType="com.dbsy.student.pojo.Employment">
    insert into employment (id, student_id, is_sign, 
      company, phone_number, remarks
      )
    values (#{id,jdbcType=INTEGER}, #{studentId,jdbcType=INTEGER}, #{isSign,jdbcType=BIT}, 
      #{company,jdbcType=VARCHAR}, #{phoneNumber,jdbcType=VARCHAR}, #{remarks,jdbcType=VARCHAR}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.dbsy.student.pojo.Employment">
        insert into employment
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="studentId != null">
                student_id,
            </if>
            <if test="isSign != null">
                is_sign,
            </if>
            <if test="company != null">
                company,
            </if>
            <if test="phoneNumber != null">
                phone_number,
            </if>
            <if test="remarks != null">
                remarks,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="studentId != null">
                #{studentId,jdbcType=INTEGER},
            </if>
            <if test="isSign != null">
                #{isSign,jdbcType=BIT},
            </if>
            <if test="company != null">
                #{company,jdbcType=VARCHAR},
            </if>
            <if test="phoneNumber != null">
                #{phoneNumber,jdbcType=VARCHAR},
            </if>
            <if test="remarks != null">
                #{remarks,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>

    <!--批量增加-->
    <insert id="batchInsert" parameterType="java.util.List">
        insert into employment (id, student_id, is_sign,
        company, phone_number, remarks
        )
        VALUES
        <foreach collection="list" item="item" separator=",">
            (#{item.id,jdbcType=INTEGER}, #{item.studentId,jdbcType=INTEGER}, #{item.isSign,jdbcType=BIT},
            #{item.company,jdbcType=VARCHAR}, #{item.phoneNumber,jdbcType=VARCHAR}, #{item.remarks,jdbcType=VARCHAR}
            )
        </foreach>
    </insert>

    <delete id="batchRemove">
        delete from employment where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>


    <select id="list" resultType="HashMap">
        select e.id as id, e.student_id as studentId,e.is_sign as isSign,e.company as company,
        e.phone_number as phoneNumber,e.remarks as remarks,
        s.name as name,s.number as number,s.department_id as departmentId ,s.major_id as majorId,
        s.clazz_id as clazzId
        from employment e left outer join student s on s.id = e.student_id
        <where>
            <if test="departmentId != null and departmentId != 0">
                and s.department_id=#{departmentId}
            </if>

            <if test="majorId != null and majorId != 0">
                and s.major_id=#{majorId}
            </if>

            <if test="clazzId != null and clazzId != 0">
                and s.clazz_id=#{clazzId}
            </if>

            <if test="grade != null and grade != 0">
                and s.grade=#{grade}
            </if>

            <if test="search_key != null">
                and s.name like CONCAT('%',#{search_key},'%')
            </if>

        </where>

        <if test="start !=null and end != null">
            limit #{start},#{end}
        </if>
    </select>

    <select id="listCount" resultType="int">
        select count(*) from employment e join student s on s.id = e.student_id
        <where>
            <if test="departmentId != null and departmentId != 0">
                and department_id=#{departmentId}
            </if>

            <if test="majorId != null and majorId != 0">
                and major_id=#{majorId}
            </if>

            <if test="clazzId != null and clazzId != 0">
                and clazz_id=#{clazzId}
            </if>

            <if test="grade != null and grade != 0">
                and grade=#{grade}
            </if>
        </where>
    </select>

</mapper>